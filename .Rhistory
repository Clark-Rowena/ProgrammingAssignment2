parent <- function(){
child <- function(){
x<-6
print(x)
print("two")
print(x)
x<-x+5
print("three")
print(x)
}
child()
print("four")
print(x)
}
parent()
}
grandparent()
ls
dir()
cd "datasciencecoursera"
cd("datasciencecoursera")
cd datasciencecoursera
dir()
pwd
pwd
ls
ls()
pwd
pwd()
dir()
setwd("~/datasciencecoursera/ProgrammingAssignment2")
ls
ls()
dir()
source(cache mean.R)
source("cache mean.R")
source("make vector.R")
bigVec <-makeVector(1:1000)
bigVec
print(bigVec,10)
makeVector <- function(x=numeric()) {
m<- NULL
set <- function(y) {
x<<-y
m<<-NULL
}
get <- function() x
setmean <- function(mean) m<<-mean
getmean <- function() m
list(set=set, get=get,setmean=setmean, getmean=getmean)
}
bigVec <- makeVector(1:10)
bigVec
m<- NULL
set <- function(y) {
x<<-y
m<<-NULL
}
get <- function() x
setmean <- function(mean) m<<-mean
getmean <- function() m
list(set=set, get=get,setmean=setmean, getmean=getmean)
}
makeVector <- function(x=numeric()) {
m<- NULL
set <- function(y) {
x<<-y
m<<-NULL
}
get <- function() x
setmean <- function(mean) m<<-mean
getmean <- function() m
list(set=set, get=get,setmean=setmean, getmean=getmean)
}
bigVec <- makeVector(1:1000)
biggerVec <- makeVector(1:100000)
cachemean <- function(x,...) {
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <-x$get()
m<-mean(data,...)
x$setmean(m)
m
}
cachemean(bigVec)
cachemean(bigVec)
cachemean(biggerVec)
cachemean(biggerVec)
bigVec <- makeVector(1:2)
cachemean(bigVec)
cachemean(bigVec)
bigVec
inversematrix <- matrix(2,2)
inversematrix
inversematrix <- matrix(nrow=2,ncol=2)
inversematrix
inversematrix <- matrix(data=NULL,nrow=2,ncol=2)
inversematrix <- matrix(data="NULL",nrow=2,ncol=2)
inversematrix
m<-NULL
m
is.null(inversematrix[1,1])
inversematrix <- matrix(nrow=2,ncol=2)
inversematrix
inversematrix <- matrix(0,nrow=2,ncol=2)
inversematrix
inversematrix <- matrix(NULL,nrow=2,ncol=2)
inversematriz <- matrix()
inversematriz
inversematriz <- matrix(nrow=0,ncol=0)
inversematriz
inversematriz <- matrix(0,2,2)
inversematriz
inversematriz <- matrix(data=0,nrow=2,ncol=2)
inversematriz
test <- inversematriz
test
makeCacheMatrix <- function(Mx=matrix(data = 0 nrow=2,ncol=2)) {
# input data to the function will be variable Mx, a matrix with default size 2 x 2 with value 0
# variable inversematrix of type matrix is created and initialised to dimension 0 x 0
# empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix<- matrix(nrow=0,ncol=0)
set <- function(newmatrixdata) {
Mx<<-newmatrixdata
inversematrix<<-matrix(nrow=0,ncol=0)
}
# define the functions for the resulting object
get <- function() Mx     # associates input matrix Mx with name "get"
setinversematrix <- function(solve) inversematrix<<-solve
getinversematrix <- function() inversematrix
#create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
makeCacheMatrix <- function(Mx=matrix(data = 0 nrow=2,ncol=2)) {
# input data to the function will be variable Mx, a matrix with default size 2 x 2 with value 0
# variable inversematrix of type matrix is created and initialised to dimension 0 x 0
# empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix<- matrix(nrow=0,ncol=0)
set <- function(newmatrixdata) {
Mx<<-newmatrixdata
inversematrix<<-matrix(nrow=0,ncol=0)
}
# define the functions for the resulting object
get <- function() Mx     # associates input matrix Mx with name "get"
setinversematrix <- function(solve) inversematrix<<-solve
getinversematrix <- function() inversematrix
#create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
makeCacheMatrix <- function(Mx=matrix(data = 0,nrow=2,ncol=2)) {
## input data to the function will be variable Mx, a matrix with default size 2 x 2 with value 0
## variable inversematrix of type matrix is created and initialised to dimension 0 x 0
## empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix <- matrix(nrow=0,ncol=0)
set <- function(newmatrixdata) {
Mx <<- newmatrixdata
inversematrix <<- matrix(nrow=0,ncol=0)
}
## define the functions for the resulting object
get <- function() Mx     # associates input matrix Mx with name "get"
setinversematrix <- function(solve) inversematrix<<-solve
getinversematrix <- function() inversematrix
## create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
makeCacheMatrix <- function(Mx=matrix(data=0,nrow=2,ncol=2)) {
## input data to the function will be variable Mx, a matrix with default size 2 x 2 with value 0
## variable inversematrix of type matrix is created and initialised to dimension 0 x 0
## empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix <- matrix(nrow=0,ncol=0)
set <- function(newmatrixdata) {
Mx <<- newmatrixdata
inversematrix <<- matrix(nrow=0,ncol=0)
}
## define the functions for the resulting object
get <- function() Mx     # associates input matrix Mx with name "get"
setinversematrix <- function(solve) inversematrix<<-solve
getinversematrix <- function() inversematrix
## create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
inversematrix <- matrix(0,0)
inversematrix <- matrix(nrow=0,ncol=0)
nrow.inversematrix
nrow.inversematrix==0
inversematrix
inversematrix <- matrix(nrow=0,ncol=0)
inversematrix
inversematrix.nrow
nrow(inversematrix)
if nrow(inversematrix)!=0 print "hello"
if (nrow(inversematrix)!=0) print "hello"
if (nrow(inversematrix)==0) print "hello"
if (nrow("inversematrix")==0) print "hello"
if (nrow("inversematrix")==0) {print "hello"
if (nrow("inversematrix")==0) {print "hello"}
if (nrow("inversematrix")==0) {print("hello")}
if(nrow("inversematrix")==0) {print("hello")}
if(nrow("inversematrix")<>0) {print("hello")}
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
message("getting cached data")
return(inversematrix)
}
inversematrix <- matrix(nrow=0,ncol=0)
inversematrix
nrow(inversematrix)
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
message("getting cached data")
quit
exit
inversematrix <- matrix(nrow=0,ncol=0)
inversematrix
nrow(inversematrix)
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
print("getting cached data")
return(inversematrix)
}
if(nrow(inversematrix)==0 & ncol(inversematrix)==0){
print("getting cached data")
return(inversematrix)
}
makeCacheMatrix <- function(Mx=matrix(data=0,nrow=2,ncol=2)) {
## input data to the function will be variable Mx, a matrix with default size 2 x 2 with value 0
## variable inversematrix of type matrix is created and initialised to dimension 0 x 0
## empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix <- matrix(nrow=0,ncol=0)
set <- function(newmatrixdata) {
Mx <<- newmatrixdata
inversematrix <<- matrix(nrow=0,ncol=0)
}
## define the functions for the resulting object
get <- function() Mx     # associates input matrix Mx with name "get"
setinversematrix <- function(solve) inversematrix<<-solve
getinversematrix <- function() inversematrix
## create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
cacheSolve <- function(x,...) {
## the input variable x is an object created by the function makeCacheMatrix
## from object x retrieve the inverse matrix
inversematrix <- x$getinversematrix()
## if dimensions of the matrix does not equal 0x0 then retrieve calculated inverse matrix
## and leave function after outputting the inverse matrix to the screen
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
print("getting cached data")
return(inversematrix)
}
## obtain the matrix data from the object
data <-x$get()
## calculate inverse matrix using solve function
inversematrix <-solve(data,...)
## store the inverse matrix in the data object
x$setinversematrix(inversematrix)
## return the calculated inverse matrix to the cacheSolve function
inversematrix
}
mymatrix<-matrix(c(-1,-2,1,1),2,2)
mymatrix
makeCacheMatrix(mymatrix)
S<-makeCacheMatrix(mymatrix)
cacheSolve(S)
mymatrix<-matrix(c(-1,-2,1,1),2,2)
makeCacheMatrix <- function(Mx=matrix(data=0,nrow=2,ncol=2)) {
## input data to the function will be variable Mx, a matrix with default size 2 x 2 with value 0
## variable inversematrix of type matrix is created and initialised to dimension 0 x 0
## empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix <- matrix(nrow=0,ncol=0)
## define the functions for the resulting object
## new matrix data is provided, store matrix in global variable and reset the
## previously calculated inverse matrix stored in global variable
set <- function(newmatrixdata) {
Mx <<- newmatrixdata
inversematrix <<- matrix(nrow=0,ncol=0)
}
## associates input matrix Mx with name "get"
get <- function() Mx
## cacheSolve combines this solve command with a matrix resulting in the inverted matrix
## being placed in the setinversematrix global variable
setinversematrix <- function(solve) inversematrix<<-solve
## retrieves the inversematrix
getinversematrix <- function() inversematrix
## create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
cacheSolve <- function(x,...) {
## the input variable x is an object created by the function makeCacheMatrix
## from object x retrieve the inverse matrix
inversematrix <- x$getinversematrix()
## if dimensions of the matrix does not equal 0x0 then retrieve calculated inverse matrix
## and leave function after outputting the inverse matrix to the screen
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
print("getting cached data")
return(inversematrix)
}
## obtain the matrix data from the object
data <-x$get()
## calculate inverse matrix using solve function
inversematrix <-solve(data,...)
## store the inverse matrix in the data object
x$setinversematrix(inversematrix)
## return the calculated inverse matrix to the cacheSolve function
inversematrix
}
mymatrix<-matrix(c(-1,-2,1,1),2,2)
S<-makeCacheMatrix(mymatrix)
cacheSolve(S)
cacheSolve(S)
mymatrix<-matrix(c(-6,-7,1,1),2,2)
mymatrix2<-matrix(c(-6,-7,1,1),2,2)
Matrix1 <-makeCacheMatrix(mymatrix)
Matrix2 <-makeCacheMatrix(mymatrix2)
mymatrix<-matrix(c(-1,-2,1,1),2,2)
mymatrix2<-matrix(c(-6,-7,1,1),2,2)
Matrix1 <-makeCacheMatrix(mymatrix)
Matrix2 <-makeCacheMatrix(mymatrix2)
cacheSolve(Matrix1)
cacheSolve(Matrix1)
cacheSolve(Matrix2)
cacheSolve(Matrix2)
mymatrix2
## A matrix is provided for analysis.  The objective is to determine the inverse of the matrix with minimal calculation time.
## To reduce processing time two functions are provided so that
## the calculation of the inverse of the input data matrix is only performed if the calculation has
## not previously been performed.
## makeCacheMatrix - initialises an object, stores the input data matrix and defines functions get (read) and set (write)
## cacheSolve - takes the object defined by makeCacheMatrix.  If the inverse matrix in the object is empty, the inverse calculation
## has not been performed.  The calculation proceeds and output is stored in the global object.
##  If the inverse matrix in the object contains values, this information is retrieved skipping the calculation step.
makeCacheMatrix <- function(x = matrix()) {
## input data to the function will be global variable x, a matrix
## variable inversematrix of type matrix is created and initialised to dimension 0 x 0
## empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix <- matrix(nrow=0,ncol=0)
## define the functions for the resulting object
## new matrix data is provided, store matrix in global variable and reset the
## previously calculated inverse matrix stored in global variable
set <- function(newmatrixdata) {
x <<- newmatrixdata
inversematrix <<- matrix(nrow=0,ncol=0)
}
## associates input matrix x with name "get"
get <- function() x
## future cacheSolve function combines this solve command with a matrix resulting in the inverted matrix
## being placed in the setinversematrix global variable
setinversematrix <- function(solve) inversematrix<<-solve
## retrieves the inversematrix
getinversematrix <- function() inversematrix
## create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
## this function is provided with an object input produced by function makeCacheMatrix.
## the object defines the function of get and set and defines the input data matrix
## if the inverse of the input data matrix has previously been calculated and stored in the object, the information is retrieved
## if the inverse of the input data matrix has not been calculated, the function calculates and stores the matrix inverse
cacheSolve <- function(x, ...) {
## the input variable x is an object created by the function makeCacheMatrix
## from object x retrieve the inverse matrix
inversematrix <- x$getinversematrix()
## if dimensions of the matrix does not equal 0x0 then retrieve calculated inverse matrix
## and leave function after outputting the inverse matrix to the screen
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
print("getting cached data")
return(inversematrix)
}
## inverse of matrix has not previously occurred so proceed to calculate and store data
## obtain the matrix data from the object
data <-x$get()
## calculate inverse matrix using solve function
inversematrix <-solve(data,...)
## store the inverse matrix in the data object
x$setinversematrix(inversematrix)
## return the calculated inverse matrix to the cacheSolve function
inversematrix
}
mymatrix<-matrix(c(-1,-2,1,1),2,2)
mymatrix2<-matrix(c(-6,-7,1,1),2,2)
Matrix2 <-makeCacheMatrix(mymatrix2)
Matrix1 <-makeCacheMatrix(mymatrix)
cacheSolve(Matrix2)
cacheSolve(Matrix2)
cacheSolve(Matrix1)
cacheSolve(Matrix1)
cacheSolve(Matrix2)
cacheSolve(Matrix1)
matrix1<-matrix((c(-1,-2,1,1)))
matrix2<-matrix((c(-6,-7,1,1)))
## A matrix is provided for analysis.  The objective is to determine the inverse of the matrix with minimal calculation time.
## To reduce processing time two functions are provided so that
## the calculation of the inverse of the input data matrix is only performed if the calculation has
## not previously been performed.
## makeCacheMatrix - initialises an object, stores the input data matrix and defines functions get (read) and set (write)
## cacheSolve - takes the object defined by makeCacheMatrix.  If the inverse matrix in the object is empty, the inverse calculation
## has not been performed.  The calculation proceeds and output is stored in the global object.
##  If the inverse matrix in the object contains values, this information is retrieved skipping the calculation step.
makeCacheMatrix <- function(x = matrix()) {
## input data to the function will be global variable x, a matrix
## variable inversematrix of type matrix is created and initialised to dimension 0 x 0
## empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix <- matrix(nrow=0,ncol=0)
## define the functions for the resulting object
## new matrix data is provided, store matrix in global variable and reset the
## previously calculated inverse matrix stored in global variable
set <- function(newmatrixdata) {
x <<- newmatrixdata
inversematrix <<- matrix(nrow=0,ncol=0)
}
## associates input matrix x with name "get"
get <- function() x
## future cacheSolve function combines this solve command with a matrix resulting in the inverted matrix
## being placed in the setinversematrix global variable
setinversematrix <- function(solve) inversematrix<<-solve
## retrieves the inversematrix
getinversematrix <- function() inversematrix
## create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
## this function is provided with an object input produced by function makeCacheMatrix.
## the object defines the function of get and set and defines the input data matrix
## if the inverse of the input data matrix has previously been calculated and stored in the object, the information is retrieved
## if the inverse of the input data matrix has not been calculated, the function calculates and stores the matrix inverse
cacheSolve <- function(x, ...) {
## the input variable x is an object created by the function makeCacheMatrix
## from object x retrieve the inverse matrix
inversematrix <- x$getinversematrix()
## if dimensions of the matrix does not equal 0x0 then retrieve calculated inverse matrix
## and leave function after outputting the inverse matrix to the screen
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
print("getting cached data")
return(inversematrix)
}
## inverse of matrix has not previously occurred so proceed to calculate and store data
## obtain the matrix data from the object
data <-x$get()
## calculate inverse matrix using solve function
inversematrix <-solve(data,...)
## store the inverse matrix in the data object
x$setinversematrix(inversematrix)
## return the calculated inverse matrix to the cacheSolve function
inversematrix
}
matrix2<-matrix((c(-6,-7,1,1)))
matrix1<-matrix((c(-1,-2,1,1)))
matrix1
## A matrix is provided for analysis.  The objective is to determine the inverse of the matrix with minimal calculation time.
## To reduce processing time two functions are provided so that
## the calculation of the inverse of the input data matrix is only performed if the calculation has
## not previously been performed.
## makeCacheMatrix - initialises an object, stores the input data matrix and defines functions get (read) and set (write)
## cacheSolve - takes the object defined by makeCacheMatrix.  If the inverse matrix in the object is empty, the inverse calculation
## has not been performed.  The calculation proceeds and output is stored in the global object.
##  If the inverse matrix in the object contains values, this information is retrieved skipping the calculation step.
makeCacheMatrix <- function(x = matrix()) {
## input data to the function will be global variable x, a matrix
## variable inversematrix of type matrix is created and initialised to dimension 0 x 0
## empty matrix = dimension 0 x 0 = inverse of input data matrix not calculated
inversematrix <- matrix(nrow=0,ncol=0)
## define the functions for the resulting object
## new matrix data is provided, store matrix in global variable and reset the
## previously calculated inverse matrix stored in global variable
set <- function(newmatrixdata) {
x <<- newmatrixdata
inversematrix <<- matrix(nrow=0,ncol=0)
}
## associates input matrix x with name "get"
get <- function() x
## future cacheSolve function combines this solve command with a matrix resulting in the inverted matrix
## being placed in the setinversematrix global variable
setinversematrix <- function(solve) inversematrix<<-solve
## retrieves the inversematrix
getinversematrix <- function() inversematrix
## create the object using functions defined above
list(set=set, get=get,setinversematrix=setinversematrix, getinversematrix=getinversematrix)
}
## this function is provided with an object input produced by function makeCacheMatrix.
## the object defines the function of get and set and defines the input data matrix
## if the inverse of the input data matrix has previously been calculated and stored in the object, the information is retrieved
## if the inverse of the input data matrix has not been calculated, the function calculates and stores the matrix inverse
cacheSolve <- function(x, ...) {
## the input variable x is an object created by the function makeCacheMatrix
## from object x retrieve the inverse matrix
inversematrix <- x$getinversematrix()
## if dimensions of the matrix does not equal 0x0 then retrieve calculated inverse matrix
## and leave function after outputting the inverse matrix to the screen
if(nrow(inversematrix)!=0 & ncol(inversematrix)!=0){
print("getting cached data")
return(inversematrix)
}
## inverse of matrix has not previously occurred so proceed to calculate and store data
## obtain the matrix data from the object
data <-x$get()
## calculate inverse matrix using solve function
inversematrix <-solve(data,...)
## store the inverse matrix in the data object
x$setinversematrix(inversematrix)
## return the calculated inverse matrix to the cacheSolve function
inversematrix
}
mymatrix1<-matrix(c(-1,-2,1,1),2,2)
mymatrix2<-matrix(c(-6,-7,1,1),2,2)
mymatrix1
object1<-makeCacheMatrix(mymatrix1)
object2<-makeCacheMatrix(mymatrix2)
object1
cacheSolve(object1)
object1
mymatrix1
cacheSolve(object1)
cacheSolve(object2)
cacheSolve(object2)
